
@{
    ViewData["Title"] = "reportMaster";
}

<h1>reportMaster</h1>


<div class="card-body">
    <h4 class="card-title">Описание 1</h4>
    <p class="card-title-desc">Описание 2</p>

    <!-- Nav tabs -->
    <ul class="nav nav-tabs nav-justified nav-tabs-custom" role="tablist">
        <li class="nav-item">
            <a class="nav-link active" data-bs-toggle="tab" href="#custom-home" role="tab" aria-selected="true">
                <i class="fas fa-th-list me-1 align-middle"></i> <span class="d-none d-md-inline-block">Колонки</span>
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" data-bs-toggle="tab" href="#custom-profile" role="tab" aria-selected="false">
                <i class="fas fa-filter me-1 align-middle"></i> <span class="d-none d-md-inline-block">Условия</span>
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" data-bs-toggle="tab" href="#custom-messages" role="tab" aria-selected="false">
                <i class="fas fa-pause me-1 align-middle"></i> <span class="d-none d-md-inline-block">Формулы</span>
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" data-bs-toggle="tab" href="#custom-settings" role="tab" aria-selected="false">
                <i class="far fa-object-group me-1 align-middle"></i> <span class="d-none d-md-inline-block">Представления</span>
            </a>
        </li>
    </ul>

    <!-- Tab panes -->
    <div class="tab-content p-3">
        <div class="tab-pane active" id="custom-home" role="tabpanel">
            <p class="mb-0">
                <!-- Колонки -->
                <div class="card">
                    @*<div class="card-header">
                        Колонки
                    </div>*@
                    <div id="BoardColumns" class="card-body">

                    </div>
                    <div class="card-footer text-muted">
                        <form class="row row-cols-lg-auto g-3 align-items-center">
                            <div class="col-12">
                                <div class="input-group">
                                    <div class="input-group-text">Группа</div>
                                    <input type="text" class="form-control" id="NewColumnGroup" placeholder="Название группы">
                                </div>
                            </div>

                            <div class="col-12">
                                <div class="input-group">
                                    <div class="input-group-text">Параметр</div>
                                    <input type="text" class="form-control" id="NewColumnElement" placeholder="Название параметра">
                                </div>
                            </div>

                            <div class="col-12">
                                <button type="button" class="btn btn-primary" onclick="addColumn();">Добавить</button>
                            </div>
                        </form>
                    </div>
                </div>
                <!----> 
            </p>
        </div>
        <div class="tab-pane" id="custom-profile" role="tabpanel">
            <p class="mb-0">
                <!-- Условия -->
                <div class="card">
                    @*<div class="card-header">
                        Условия
                    </div>*@
                    <div id="BoardConditions" class="card-body">

                    </div>
                    <div class="card-footer text-muted">
                        <form class="row row-cols-lg-auto g-3 align-items-center">
                            <div class="col-12">
                                <div class="input-group">
                                    <div class="input-group-text">ID колонки</div>
                                    <input type="text" class="form-control" id="NewConditionIdCol" placeholder="ID колонки">
                                </div>
                            </div>

                            <div class="col-12">
                                <div class="input-group">
                                    <div class="input-group-text">Условие</div>
                                    <input type="text" class="form-control" id="NewConditionUse" placeholder="Условие">
                                </div>
                            </div>

                            <div class="col-12">
                                <div class="input-group">
                                    <div class="input-group-text">Константа 1</div>
                                    <input type="text" class="form-control" id="NewConditionValue1" placeholder="Константа 1">
                                </div>
                            </div>

                            <div class="col-12">
                                <div class="input-group">
                                    <div class="input-group-text">Константа 2</div>
                                    <input type="text" class="form-control" id="NewConditionValue2" placeholder="Константа 2">
                                </div>
                            </div>

                            <div class="col-12">
                                <button type="button" class="btn btn-primary" onclick="addCondition();">Добавить</button>
                            </div>
                        </form>
                    </div>
                </div>
                <!---->
            </p>
        </div>
        <div class="tab-pane" id="custom-messages" role="tabpanel">
            <p class="mb-0">
                <!-- Формула -->
                <div class="card">
                    @*<div class="card-header">
                        Формула
                    </div>*@
                    <div id="BoardFormuls" class="card-body">

                    </div>
                    <div class="card-footer text-muted">
                        <form class="row row-cols-lg-auto g-3 align-items-center">
                            <div class="col-12">
                                <div class="input-group">
                                    <div class="input-group-text">Тип слева</div>
                                    <input type="text" class="form-control" id="NewFormulaType1" placeholder="Тип слева">
                                </div>
                            </div>

                            <div class="col-12">
                                <div class="input-group">
                                    <div class="input-group-text">ID слева</div>
                                    <input type="text" class="form-control" id="NewFormulaId1" placeholder="ID слева">
                                </div>
                            </div>

                            <div class="col-12">
                                <div class="input-group">
                                    <div class="input-group-text">Оператор</div>
                                    <input type="text" class="form-control" id="NewFormulaOperator" placeholder="Оператор">
                                </div>
                            </div>

                            <div class="col-12">
                                <div class="input-group">
                                    <div class="input-group-text">Тип справа</div>
                                    <input type="text" class="form-control" id="NewFormulaType2" placeholder="Тип справа">
                                </div>
                            </div>

                            <div class="col-12">
                                <div class="input-group">
                                    <div class="input-group-text">ID справа</div>
                                    <input type="text" class="form-control" id="NewFormulaId2" placeholder="ID справа">
                                </div>
                            </div>

                            <div class="col-12">
                                <button type="button" class="btn btn-primary" onclick="addFormula();">Добавить</button>
                            </div>
                        </form>
                    </div>
                </div>
                <!---->
            </p>
        </div>
        <div class="tab-pane" id="custom-settings" role="tabpanel">
            <p class="mb-0">
                <!-- Представления -->
                <div class="card">
                    @*<div class="card-header">
                        Представления
                    </div>*@
                    <div id="BoardViews" class="card-body">

                    </div>
                    <div class="card-footer text-muted">
                        <form class="row row-cols-lg-auto g-3 align-items-center">
                            <div class="col-12">
                                <div class="input-group">
                                    <div class="input-group-text">ID формулы</div>
                                    <input type="text" class="form-control" id="NewViewFormula" placeholder="ID формулы">
                                </div>
                            </div>

                            <div class="col-12">
                                <div class="input-group">
                                    <div class="input-group-text">Колонки</div>
                                    <input type="text" class="form-control" id="NewViewColumns" placeholder="Колонки">
                                </div>
                            </div>

                            <div class="col-12">
                                <button type="button" class="btn btn-primary" onclick="addView();">Добавить</button>
                            </div>
                        </form>
                    </div>
                </div>
                <!---->
            </p>
        </div>
    </div>

</div>




@section Scripts {
    

    <script type="text/javascript">

        getColumns(0);
        getConditions(0);
        getFormuls(0);
        getViews(0);
        console.log('OK');

        // --------------
        // Загрузить список колонок
        async function getColumns(Id) {
            let formData = new FormData();
            formData.append("Id", 0);;

            $.ajax({
                type: "POST",
                url: `${GetPathBase()}/Business/JsGetColumns`,
                xhr: function () {
                    var myXhr = $.ajaxSettings.xhr();
                    if (myXhr.upload) {
                        myXhr.upload.onprogress = function (evt) {
                            if (evt.lengthComputable) {
                                var percentComplete = parseInt((evt.loaded / evt.total) * 100);
                                console.log("Загрузка: " + percentComplete + "% выполнено")
                            }
                        };
                    }
                    return myXhr;
                },
                success: function (data) {
                    // your callback here
                    //console.log(data);
                    //console.log(data.result);
                    console.log(data.columns);
                    DrawColumns(data.columns);

                },
                error: function (jqXHR, textStatus, errorThrown) {
                    // handle error
                    alert("jqXHR.status "+ jqXHR.status)
                    //alert("etAllResponseHeaders() "+ jqXHR.getAllResponseHeaders())
                    //alert("jqXHR.responseText "+ jqXHR.responseText)
                    //alert("textStatus " + textStatus)
                    //alert("errorThrown " + errorThrown)
                },
                async: true,
                data: formData,
                cache: false,
                contentType: false,
                processData: false,
                beforeSend: function () {

                },
                complete: function () {

                },
                timeout: 60000
            });

        }
        // Добавить колонку
        function addColumn() {
            var group = $('#NewColumnGroup').val();
            var element = $('#NewColumnElement').val();
            console.log(group, element);

            // JsAddColumn(string nameGroup, string element)
            let formData = new FormData();
            formData.append("nameGroup", group);
            formData.append("element", element);

            $.ajax({
                type: "POST",
                url: `${GetPathBase()}/Business/JsAddColumn`,
                xhr: function () {
                    var myXhr = $.ajaxSettings.xhr();
                    if (myXhr.upload) {
                        myXhr.upload.onprogress = function (evt) {
                            if (evt.lengthComputable) {
                                var percentComplete = parseInt((evt.loaded / evt.total) * 100);
                                console.log("Загрузка: " + percentComplete + "% выполнено")
                            }
                        };
                    }
                    return myXhr;
                },
                success: function (data) {
                    // your callback here
                    if (data.Id == null) {
                        alert(data.message);
                    }
                    getColumns(0);
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    // handle error
                    alert("jqXHR.status " + jqXHR.status)
                },
                async: true,
                data: formData,
                cache: false,
                contentType: false,
                processData: false,
                beforeSend: function () {

                },
                complete: function () {

                },
                timeout: 60000
            });

        }
        // Удалить колонку
        function delColumn(Id) {
            console.log(Id);

            // JsDelColumn(int Id = 0)
            let formData = new FormData();
            formData.append("Id", Id);

            $.ajax({
                type: "POST",
                url: `${GetPathBase()}/Business/JsDelColumn`,
                xhr: function () {
                    var myXhr = $.ajaxSettings.xhr();
                    if (myXhr.upload) {
                        myXhr.upload.onprogress = function (evt) {
                            if (evt.lengthComputable) {
                                var percentComplete = parseInt((evt.loaded / evt.total) * 100);
                                console.log("Загрузка: " + percentComplete + "% выполнено")
                            }
                        };
                    }
                    return myXhr;
                },
                success: function (data) {
                    // your callback here
                    if (data.Id == null) {
                        alert(data.message);
                    }
                    getColumns(0);
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    // handle error
                    alert("jqXHR.status " + jqXHR.status)
                },
                async: true,
                data: formData,
                cache: false,
                contentType: false,
                processData: false,
                beforeSend: function () {

                },
                complete: function () {

                },
                timeout: 60000
            });

        }

        // Загрузить список условий
        async function getConditions(Id) {
            let formData = new FormData();
            formData.append("Id", 0);;

            $.ajax({
                type: "POST",
                url: `${GetPathBase()}/Business/JsGetConditions`,
                xhr: function () {
                    var myXhr = $.ajaxSettings.xhr();
                    if (myXhr.upload) {
                        myXhr.upload.onprogress = function (evt) {
                            if (evt.lengthComputable) {
                                var percentComplete = parseInt((evt.loaded / evt.total) * 100);
                                console.log("Загрузка: " + percentComplete + "% выполнено")
                            }
                        };
                    }
                    return myXhr;
                },
                success: function (data) {
                    // your callback here
                    //console.log(data);
                    //console.log(data.result);
                    console.log(data.conditions);
                    DrawConditions(data.conditions);

                },
                error: function (jqXHR, textStatus, errorThrown) {
                    // handle error
                    alert("jqXHR.status " + jqXHR.status)
                    //alert("etAllResponseHeaders() "+ jqXHR.getAllResponseHeaders())
                    //alert("jqXHR.responseText "+ jqXHR.responseText)
                    //alert("textStatus " + textStatus)
                    //alert("errorThrown " + errorThrown)
                },
                async: true,
                data: formData,
                cache: false,
                contentType: false,
                processData: false,
                beforeSend: function () {

                },
                complete: function () {

                },
                timeout: 60000
            });

        }
        // Добавить условие
        function addCondition() {
            var IdColumn = $('#NewConditionIdCol').val();
            var nameCondition = $('#NewConditionUse').val();
            var value1 = $('#NewConditionValue1').val();
            var value2 = $('#NewConditionValue2').val();

            // JsAddCondition(int IdColumn, string nameCondition, string value1 = "", string value2 = "")
            let formData = new FormData();
            formData.append("IdColumn", IdColumn);
            formData.append("nameCondition", nameCondition);
            formData.append("value1", value1);
            formData.append("value2", value2);

            $.ajax({
                type: "POST",
                url: `${GetPathBase()}/Business/JsAddCondition`,
                xhr: function () {
                    var myXhr = $.ajaxSettings.xhr();
                    if (myXhr.upload) {
                        myXhr.upload.onprogress = function (evt) {
                            if (evt.lengthComputable) {
                                var percentComplete = parseInt((evt.loaded / evt.total) * 100);
                                console.log("Загрузка: " + percentComplete + "% выполнено")
                            }
                        };
                    }
                    return myXhr;
                },
                success: function (data) {
                    // your callback here
                    if (data.Id == null) {
                        alert(data.message);
                    }
                    getConditions(0);
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    // handle error
                    alert("jqXHR.status " + jqXHR.status)
                },
                async: true,
                data: formData,
                cache: false,
                contentType: false,
                processData: false,
                beforeSend: function () {

                },
                complete: function () {

                },
                timeout: 60000
            });

        }
        // Удалить условие
        function delCondition(Id) {
            console.log(Id);

            // JsDelColumn(int Id = 0)
            let formData = new FormData();
            formData.append("Id", Id);

            $.ajax({
                type: "POST",
                url: `${GetPathBase()}/Business/JsDelCondition`,
                xhr: function () {
                    var myXhr = $.ajaxSettings.xhr();
                    if (myXhr.upload) {
                        myXhr.upload.onprogress = function (evt) {
                            if (evt.lengthComputable) {
                                var percentComplete = parseInt((evt.loaded / evt.total) * 100);
                                console.log("Загрузка: " + percentComplete + "% выполнено")
                            }
                        };
                    }
                    return myXhr;
                },
                success: function (data) {
                    // your callback here
                    if (data.Id == null) {
                        alert(data.message);
                    }
                    getConditions(0);
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    // handle error
                    alert("jqXHR.status " + jqXHR.status)
                },
                async: true,
                data: formData,
                cache: false,
                contentType: false,
                processData: false,
                beforeSend: function () {

                },
                complete: function () {

                },
                timeout: 60000
            });

        }

        // Загрузить список формул
        async function getFormuls(Id) {
            let formData = new FormData();
            formData.append("Id", 0);;

            $.ajax({
                type: "POST",
                url: `${GetPathBase()}/Business/JsGetFormuls`,
                xhr: function () {
                    var myXhr = $.ajaxSettings.xhr();
                    if (myXhr.upload) {
                        myXhr.upload.onprogress = function (evt) {
                            if (evt.lengthComputable) {
                                var percentComplete = parseInt((evt.loaded / evt.total) * 100);
                                console.log("Загрузка: " + percentComplete + "% выполнено")
                            }
                        };
                    }
                    return myXhr;
                },
                success: function (data) {
                    // your callback here
                    //console.log(data);
                    //console.log(data.result);
                    console.log(data.formuls);
                    DrawFormuls(data.formuls);
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    // handle error
                    alert("jqXHR.status " + jqXHR.status)
                    //alert("etAllResponseHeaders() "+ jqXHR.getAllResponseHeaders())
                    //alert("jqXHR.responseText "+ jqXHR.responseText)
                    //alert("textStatus " + textStatus)
                    //alert("errorThrown " + errorThrown)
                },
                async: true,
                data: formData,
                cache: false,
                contentType: false,
                processData: false,
                beforeSend: function () {

                },
                complete: function () {

                },
                timeout: 60000
            });

        }
        // Добавить формулу
        function addFormula() {
            var boolLeft = $('#NewFormulaType1').val();
            var IdLeft = $('#NewFormulaId1').val();
            var boolAndOr = $('#NewFormulaOperator').val();
            var boolRight = $('#NewFormulaType2').val();
            var IdRight = $('#NewFormulaId2').val();

            // JsAddFormula(bool boolLeft, int IdLeft, bool boolAndOr, bool boolRight, int IdRight)
            let formData = new FormData();
            formData.append("boolLeft", boolLeft);
            formData.append("IdLeft", IdLeft);
            formData.append("boolAndOr", boolAndOr);
            formData.append("boolRight", boolRight);
            formData.append("IdRight", IdRight);

            $.ajax({
                type: "POST",
                url: `${GetPathBase()}/Business/JsAddFormula`,
                xhr: function () {
                    var myXhr = $.ajaxSettings.xhr();
                    if (myXhr.upload) {
                        myXhr.upload.onprogress = function (evt) {
                            if (evt.lengthComputable) {
                                var percentComplete = parseInt((evt.loaded / evt.total) * 100);
                                console.log("Загрузка: " + percentComplete + "% выполнено")
                            }
                        };
                    }
                    return myXhr;
                },
                success: function (data) {
                    // your callback here
                    if (data.Id == null) {
                        alert(data.message);
                    }
                    getFormuls(0);
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    // handle error
                    alert("jqXHR.status " + jqXHR.status)
                },
                async: true,
                data: formData,
                cache: false,
                contentType: false,
                processData: false,
                beforeSend: function () {

                },
                complete: function () {

                },
                timeout: 60000
            });

        }
        // Удалить формулу
        function delFormula(Id) {
            console.log(Id);

            // JsDelColumn(int Id = 0)
            let formData = new FormData();
            formData.append("Id", Id);

            $.ajax({
                type: "POST",
                url: `${GetPathBase()}/Business/JsDelFormula`,
                xhr: function () {
                    var myXhr = $.ajaxSettings.xhr();
                    if (myXhr.upload) {
                        myXhr.upload.onprogress = function (evt) {
                            if (evt.lengthComputable) {
                                var percentComplete = parseInt((evt.loaded / evt.total) * 100);
                                console.log("Загрузка: " + percentComplete + "% выполнено")
                            }
                        };
                    }
                    return myXhr;
                },
                success: function (data) {
                    // your callback here
                    if (data.Id == null) {
                        alert(data.message);
                    }
                    getFormuls(0);
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    // handle error
                    alert("jqXHR.status " + jqXHR.status)
                },
                async: true,
                data: formData,
                cache: false,
                contentType: false,
                processData: false,
                beforeSend: function () {

                },
                complete: function () {

                },
                timeout: 60000
            });

        }

        // Загрузить список представлений
        async function getViews(Id) {
            let formData = new FormData();
            formData.append("Id", 0);;

            $.ajax({
                type: "POST",
                url: `${GetPathBase()}/Business/JsGetViews`,
                xhr: function () {
                    var myXhr = $.ajaxSettings.xhr();
                    if (myXhr.upload) {
                        myXhr.upload.onprogress = function (evt) {
                            if (evt.lengthComputable) {
                                var percentComplete = parseInt((evt.loaded / evt.total) * 100);
                                console.log("Загрузка: " + percentComplete + "% выполнено")
                            }
                        };
                    }
                    return myXhr;
                },
                success: function (data) {
                    // your callback here
                    //console.log(data);
                    //console.log(data.result);
                    console.log(data.views);
                    DrawViews(data.views);
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    // handle error
                    alert("jqXHR.status " + jqXHR.status)
                    //alert("etAllResponseHeaders() "+ jqXHR.getAllResponseHeaders())
                    //alert("jqXHR.responseText "+ jqXHR.responseText)
                    //alert("textStatus " + textStatus)
                    //alert("errorThrown " + errorThrown)
                },
                async: true,
                data: formData,
                cache: false,
                contentType: false,
                processData: false,
                beforeSend: function () {

                },
                complete: function () {

                },
                timeout: 60000
            });

        }
        // Добавить представление
        function addView() {
            var IdFormula = $('#NewViewFormula').val();
            var IdsColumns = $('#NewViewColumns').val();

            // JsonResult JsAddView(int IdFormula, string IdsColumns)
            let formData = new FormData();
            formData.append("IdFormula", IdFormula);
            formData.append("IdsColumns", IdsColumns);

            $.ajax({
                type: "POST",
                url: `${GetPathBase()}/Business/JsAddView`,
                xhr: function () {
                    var myXhr = $.ajaxSettings.xhr();
                    if (myXhr.upload) {
                        myXhr.upload.onprogress = function (evt) {
                            if (evt.lengthComputable) {
                                var percentComplete = parseInt((evt.loaded / evt.total) * 100);
                                console.log("Загрузка: " + percentComplete + "% выполнено")
                            }
                        };
                    }
                    return myXhr;
                },
                success: function (data) {
                    // your callback here
                    if (data.Id == null) {
                        alert(data.message);
                    }
                    getViews(0);
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    // handle error
                    alert("jqXHR.status " + jqXHR.status)
                },
                async: true,
                data: formData,
                cache: false,
                contentType: false,
                processData: false,
                beforeSend: function () {

                },
                complete: function () {

                },
                timeout: 60000
            });

        }
        // Удалить представление
        function delView(Id) {
            console.log(Id);

            // JsDelColumn(int Id = 0)
            let formData = new FormData();
            formData.append("Id", Id);

            $.ajax({
                type: "POST",
                url: `${GetPathBase()}/Business/JsDelView`,
                xhr: function () {
                    var myXhr = $.ajaxSettings.xhr();
                    if (myXhr.upload) {
                        myXhr.upload.onprogress = function (evt) {
                            if (evt.lengthComputable) {
                                var percentComplete = parseInt((evt.loaded / evt.total) * 100);
                                console.log("Загрузка: " + percentComplete + "% выполнено")
                            }
                        };
                    }
                    return myXhr;
                },
                success: function (data) {
                    // your callback here
                    if (data.Id == null) {
                        alert(data.message);
                    }
                    getViews(0);
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    // handle error
                    alert("jqXHR.status " + jqXHR.status)
                },
                async: true,
                data: formData,
                cache: false,
                contentType: false,
                processData: false,
                beforeSend: function () {

                },
                complete: function () {

                },
                timeout: 60000
            });

        }

        // --------------------------------------------------------------------------------
        //Сортировка по Id для массива
        function SortById(a, b) {
            var aId = a.Id;
            var bId = b.Id;
            return ((aId < bId) ? -1 : ((aId > bId) ? 1 : 0));
        }

        // --------------------------------------------------------------------------------
        // Построить список колонок
        function DrawColumns(columns) {
            columns.sort(SortById);

            //var table = document.createElement('table');
            var $tbl = $('<table class="table table-sm table-striped mb-0 table-bordered" style="border-collapse: collapse; border-spacing: 0px; width: 100%;"/>');
            var $thead = $('<thead class="bg-primary text-white"/>');
            $thead.append('<tr><td> ID </td><td> Группа </td><td> Параметр </td><td> Команды </td></tr>');
            var $tbody = $('<tbody/>');

            $.each(columns, function (index, value) {
                //console.log(index, value.Id, value.element, value.group);

                //var tr = document.createElement('tr');
                //var td1 = document.createElement('td');
                //var td2 = document.createElement('td');
                //var td3 = document.createElement('td');
                //var text1 = document.createTextNode(value.Id);
                //var text2 = document.createTextNode(value.element);
                //var text3 = document.createTextNode(value.group);
                //td1.appendChild(text1);
                //td2.appendChild(text2);
                //td3.appendChild(text3);
                //tr.appendChild(td1);
                //tr.appendChild(td2);
                //tr.appendChild(td3);
                //table.appendChild(tr);
                $tbody.append('<tr><td>' + value.Id + '</td><td>' + value.group + '</td><td>' + value.element + '</td><td> <a class="btn btn-outline-primary btn-sm edit mx-1" title="Удалить" data-bs-toggle="modal" data-bs-target="#myModalDel" onclick="delColumn('+value.Id+')"><i class="fas fa-times fa-lg"></i></a> </td></tr>');

            });

            $tbl.append($thead);
            $tbl.append($tbody);

            $("#BoardColumns").empty();
            //$('#Board').append(table);
            $('#BoardColumns').append($tbl);

            console.log('Table OK');

        }

        // Построить список условий
        function DrawConditions(conditions) {
            conditions.sort(SortById);

            var $tbl = $('<table class="table table-sm table-striped mb-0 table-bordered" style="border-collapse: collapse; border-spacing: 0px; width: 100%;"/>');
            var $thead = $('<thead class="bg-primary text-white"/>');
            $thead.append('<tr><td> ID </td><td> ID колонки </td><td> Условие </td><td> Константа 1 </td><td> Константа 2 </td><td> Команды </td></tr>');
            var $tbody = $('<tbody/>');

            $.each(conditions, function (index, value) {
                $tbody.append('<tr><td>' + value.Id + '</td><td>' + value.IdColumn + '</td><td>' + value.condition + '</td><td>' + value.value1 + '</td><td>' + value.value2 + '</td><td> <a class="btn btn-outline-primary btn-sm edit mx-1" title="Удалить" data-bs-toggle="modal" data-bs-target="#myModalDel" onclick="delCondition(' + value.Id + ')"><i class="fas fa-times fa-lg"></i></a> </td></tr>');
            });

            $tbl.append($thead);
            $tbl.append($tbody);

            $("#BoardConditions").empty();
            $('#BoardConditions').append($tbl);

            console.log('Table OK');
        }

        // Построить список формул
        function DrawFormuls(formuls) {
            formuls.sort(SortById);

            var $tbl = $('<table class="table table-sm table-striped mb-0 table-bordered" style="border-collapse: collapse; border-spacing: 0px; width: 100%;"/>');
            var $thead = $('<thead class="bg-primary text-white"/>');
            $thead.append('<tr><td> ID </td><td> Тип слева </td><td> ID слева </td><td> Оператор </td><td> Тип справа </td><td> ID справа </td><td> Команды </td></tr>');
            var $tbody = $('<tbody/>');

            $.each(formuls, function (index, value) {
                $tbody.append('<tr><td>' + value.Id + '</td><td>' + value.typeLeft + '</td><td>' + value.IdLeft + '</td><td>' + value.AndOr + '</td><td>' + value.typeRight + '</td><td>' + value.IdRight + '</td><td> <a class="btn btn-outline-primary btn-sm edit mx-1" title="Удалить" data-bs-toggle="modal" data-bs-target="#myModalDel" onclick="delFormula(' + value.Id + ')"><i class="fas fa-times fa-lg"></i></a> </td></tr>');
            });

            $tbl.append($thead);
            $tbl.append($tbody);

            $("#BoardFormuls").empty();
            $('#BoardFormuls').append($tbl);

            console.log('Table OK');
        }

        // Построить список представлений
        function DrawViews(views) {
            views.sort(SortById);

            //var table = document.createElement('table');
            var $tbl = $('<table class="table table-sm table-striped mb-0 table-bordered" style="border-collapse: collapse; border-spacing: 0px; width: 100%;"/>');
            var $thead = $('<thead class="bg-primary text-white"/>');
            $thead.append('<tr><td> ID </td><td> ID формулы </td><td> Колонки </td><td> Команды </td></tr>');
            var $tbody = $('<tbody/>');
            
            $.each(views, function (index, value) {
                //console.log(index, value.Id, value.element, value.group);

                //var tr = document.createElement('tr');
                //var td1 = document.createElement('td');
                //var td2 = document.createElement('td');
                //var td3 = document.createElement('td');
                //var text1 = document.createTextNode(value.Id);
                //var text2 = document.createTextNode(value.element);
                //var text3 = document.createTextNode(value.group);
                //td1.appendChild(text1);
                //td2.appendChild(text2);
                //td3.appendChild(text3);
                //tr.appendChild(td1);
                //tr.appendChild(td2);
                //tr.appendChild(td3);
                //table.appendChild(tr);
                $tbody.append('<tr><td>' + value.Id + '</td><td>' + value.IdFormula + '</td><td>' + value.IdColumns + '</td><td> <a class="btn btn-outline-primary btn-sm edit mx-1" title="Удалить" data-bs-toggle="modal" data-bs-target="#myModalDel" onclick="delView(' + value.Id + ')"><i class="fas fa-times fa-lg"></i></a> </td></tr>');

            });

            $tbl.append($thead);
            $tbl.append($tbody);

            $("#BoardViews").empty();
            //$('#Board').append(table);
            $('#BoardViews').append($tbl);

            console.log('Table OK');

        }

    </script>
}