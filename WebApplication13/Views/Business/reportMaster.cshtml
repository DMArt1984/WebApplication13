
@{
    ViewData["Title"] = "reportMaster";

    string BoolToQueryLeftRight(string value)
    {
        if (value == QueryLeftRight.Formula.ToString())
        {
            return "Выборка";
        }
        else if (value == QueryLeftRight.Condition.ToString())
        {
            return "Фильтр";
        } else
        {
            return "Нет";
        }
    }

    string BoolToOperatorLeftRight(string  value)
    {
        if (value == OperatorLeftRight.AND.ToString())
        {
            return "И";
        }
        else if (value == OperatorLeftRight.OR.ToString())
        {
            return "ИЛИ";
        } else
        {
            return "-";
        }
    }

    // ------- Списки -------

    List<SelectListItem> TextAndOr = new List<SelectListItem>();
    foreach (string title in Enum.GetNames(typeof(OperatorLeftRight)))
    {
        TextAndOr.Add(new SelectListItem { Value = title, Text = BoolToOperatorLeftRight(title) });
    }

    List<SelectListItem> TextLeftRight = new List<SelectListItem>();
    foreach (string title in Enum.GetNames(typeof(QueryLeftRight)))
    {
        TextLeftRight.Add(new SelectListItem { Value = title, Text = BoolToQueryLeftRight(title) });
    }

    List<SelectListItem> TextCondition = new List<SelectListItem>();
    foreach (string title in Enum.GetNames(typeof(RepCondition)))
    {
        TextCondition.Add(new SelectListItem { Value = title, Text = title });
    }

    List<SelectListItem> TextGroup = new List<SelectListItem>();
    foreach (string title in Enum.GetNames(typeof(RepGroup)))
    {
        TextGroup.Add(new SelectListItem { Value = title, Text = title });
    }

    List<SelectListItem> TextSO = new List<SelectListItem>();
    foreach (string title in Enum.GetNames(typeof(RepSO)))
    {
        TextSO.Add(new SelectListItem { Value = title, Text = title });
    }

    List<SelectListItem> TextWork = new List<SelectListItem>();
    foreach (string title in Enum.GetNames(typeof(RepWork)))
    {
        TextWork.Add(new SelectListItem { Value = title, Text = title });
    }

    List<SelectListItem> TextStep = new List<SelectListItem>();
    foreach (string title in Enum.GetNames(typeof(RepStep)))
    {
        TextStep.Add(new SelectListItem { Value = title, Text = title });
    }

    List<SelectListItem> TextUser = new List<SelectListItem>();
    foreach (string title in Enum.GetNames(typeof(RepUser)))
    {
        TextUser.Add(new SelectListItem { Value = title, Text = title });
    }

    List<SelectListItem> TextFile = new List<SelectListItem>();
    foreach (string title in Enum.GetNames(typeof(RepFile)))
    {
        TextFile.Add(new SelectListItem { Value = title, Text = title });
    }

}

<h1>reportMaster</h1>


<div class="card-body">
    <h4 class="card-title">Описание 1</h4>
    <p class="card-title-desc">Описание 2</p>

    <!-- Nav tabs -->
    <ul class="nav nav-tabs nav-justified nav-tabs-custom" role="tablist">
        <li class="nav-item">
            <a class="nav-link active" data-bs-toggle="tab" href="#custom-home" role="tab" aria-selected="true">
                <i class="fas fa-th-list me-1 align-middle"></i> <span class="d-none d-md-inline-block">Колонки</span>
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" data-bs-toggle="tab" href="#custom-profile" role="tab" aria-selected="false">
                <i class="fas fa-filter me-1 align-middle"></i> <span class="d-none d-md-inline-block">Фильтры</span>
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" data-bs-toggle="tab" href="#custom-messages" role="tab" aria-selected="false">
                <i class="fas fa-pause me-1 align-middle"></i> <span class="d-none d-md-inline-block">Выборки</span>
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" data-bs-toggle="tab" href="#custom-settings" role="tab" aria-selected="false">
                <i class="far fa-object-group me-1 align-middle"></i> <span class="d-none d-md-inline-block">Представления</span>
            </a>
        </li>
    </ul>

    <!-- Tab panes -->
    <div class="tab-content p-3">
        <div class="tab-pane active" id="custom-home" role="tabpanel">
            <p class="mb-0">
                <!-- Колонки -->
                <div class="card">
                    @*<div class="card-header">
                        Колонки
                    </div>*@
                    <div id="BoardColumns" class="card-body">

                    </div>
                    <div class="card-footer text-muted">
                        <form class="row row-cols-lg-auto g-3 align-items-center">
                            <div class="col-12">
                                <div class="input-group">
                                    <div class="input-group-text">Группа</div>
                                    @*<input type="text" class="form-control" id="NewColumnGroup" placeholder="Название группы">*@
                                    <select id="NewColumnGroup" class="form-select" name="Group" value="0" asp-items="TextGroup" onchange="changeGroup();"></select>
                                </div>
                            </div>

                            <div class="col-12">
                                <div class="input-group">
                                    <div class="input-group-text">Параметр</div>
                                    <input type="text" class="form-control" id="NewColumnElement" placeholder="Название параметра">
                                    <select id="NewColumnSO" class="form-select" name="GroupSO" value="0" asp-items="TextSO" onchange="setColumnElement($('#NewColumnSO').val());"></select>
                                    <select id="NewColumnWork" class="form-select" name="GroupWork" value="0" asp-items="TextWork" onchange="setColumnElement($('#NewColumnWork').val());"></select>
                                    <select id="NewColumnStep" class="form-select" name="GroupStep" value="0" asp-items="TextStep" onchange="setColumnElement($('#NewColumnStep').val());"></select>
                                    <select id="NewColumnUser" class="form-select" name="GroupUser" value="0" asp-items="TextUser" onchange="setColumnElement($('#NewColumnUser').val());"></select>
                                    <select id="NewColumnFile" class="form-select" name="GroupFile" value="0" asp-items="TextFile" onchange="setColumnElement($('#NewColumnFile').val());"></select>
                                </div>
                            </div>

                            <div class="col-12">
                                <button type="button" class="btn btn-primary" onclick="addColumn();">Добавить</button>
                            </div>
                        </form>
                    </div>
                </div>
                <!----> 
            </p>
        </div>
        <div class="tab-pane" id="custom-profile" role="tabpanel">
            <p class="mb-0">
                <!-- Условия (Фильтры) -->
                <div class="card">
                    @*<div class="card-header">
                        Условия (Фильтры)
                    </div>*@
                    <div id="BoardConditions" class="card-body">

                    </div>
                    <div class="card-footer text-muted">
                        <form class="row row-cols-lg-auto g-3 align-items-center">
                            <div class="col-12 d-none">
                                <div class="input-group">
                                    <div class="input-group-text">ID колонки</div>
                                    <input type="text" class="form-control" id="NewConditionIdCol" placeholder="ID колонки">
                                </div>
                            </div>

                            <div class="col-12">
                                <div class="input-group">
                                    <div class="input-group-text">Колонка</div>
                                    <select id="NewConditionCol" class="form-select" name="ConditionCol" value="0" onchange="changeElementCondition();"></select>
                                </div>
                            </div>

                            <div class="col-12">
                                <div class="input-group">
                                    <div class="input-group-text">Условие</div>
                                    @*<input type="text" class="form-control" id="NewConditionUse" placeholder="Условие">*@
                                    <select id="NewConditionUse" class="form-select" name="Condition" value="0" asp-items="TextCondition" onchange="changeUseCondition();"></select>
                                </div>
                            </div>

                            <div id="conval1" class="col-12">
                                <div class="input-group">
                                    <div class="input-group-text">Константа 1</div>
                                    <input type="text" class="form-control" id="NewConditionValue1" placeholder="Константа 1">
                                </div>
                            </div>

                            <div id="conval2" class="col-12">
                                <div class="input-group">
                                    <div class="input-group-text">Константа 2</div>
                                    <input type="text" class="form-control" id="NewConditionValue2" placeholder="Константа 2">
                                </div>
                            </div>

                            <div class="col-12">
                                <button type="button" class="btn btn-primary" onclick="addCondition();">Добавить</button>
                            </div>
                        </form>
                    </div>
                </div>
                <!---->
            </p>
        </div>
        <div class="tab-pane" id="custom-messages" role="tabpanel">
            <p class="mb-0">
                <!-- Формула (Выборка) -->
                <div class="card">
                    @*<div class="card-header">
                        Формула (Выборка)
                    </div>*@
                    <div id="BoardFormuls" class="card-body">

                    </div>
                    <div class="card-footer text-muted">
                        <form class="row row-cols-lg-auto g-3 align-items-center">
                            <div class="col-12">
                                <div class="input-group">
                                    <div class="input-group-text">Тип слева</div>
                                    @*<input type="text" class="form-control" id="NewFormulaType1" placeholder="Тип слева">*@
                                    <select id="NewFormulaType1" class="form-select" name="Type1" value="0" asp-items="TextLeftRight" onchange="changeLeftAndRight();"></select>
                                </div>
                            </div>

                            <div id="colformulaId1" class="col-12">
                                <div class="input-group">
                                    <div class="input-group-text">Слева</div>
                                    <input type="text" class="form-control d-none" id="NewFormulaId1" placeholder="ID слева">
                                    <select id="LeftFromCondition" class="form-select" name="LeftFromCondition" value="0" onchange="changeLeftCondition()"></select>
                                    <select id="LeftFromFormula" class="form-select" name="LeftFromFormula" value="0" onchange="changeLeftFormula()"></select>
                                </div>
                            </div>

                            <div id="coloperator" class="col-12">
                                <div class="input-group">
                                    <div class="input-group-text">Оператор</div>
                                    @*<input type="text" class="form-control" id="NewFormulaOperator" placeholder="Оператор">*@
                                    <select id="NewFormulaOperator" class="form-select" name="Operator" value="0" asp-items="TextAndOr" onchange="changeLeftAndRight();"></select>
                                </div>
                            </div>

                            <div id="colformulaType2" class="col-12">
                                <div class="input-group">
                                    <div class="input-group-text">Тип справа</div>
                                    @*<input type="text" class="form-control" id="NewFormulaType2" placeholder="Тип справа">*@
                                    <select id="NewFormulaType2" class="form-select" name="Type2" value="0" asp-items="TextLeftRight" onchange="changeLeftAndRight();"></select>
                                </div>
                            </div>

                            <div id="colformulaId2" class="col-12">
                                <div class="input-group">
                                    <div class="input-group-text">Справа</div>
                                    <input type="text" class="form-control d-none" id="NewFormulaId2" placeholder="ID справа">
                                    <select id="RightFromCondition" class="form-select" name="RightFromCondition" value="0" onchange="changeRightCondition()"></select>
                                    <select id="RightFromFormula" class="form-select" name="RightFromFormula" value="0" onchange="changeRightFormula()"></select>
                                </div>
                            </div>

                            <div id="colformulaBut" class="col-12">
                                <button type="button" class="btn btn-primary" onclick="addFormula();">Добавить</button>
                            </div>
                        </form>
                    </div>
                </div>
                <!---->
            </p>
        </div>
        <div class="tab-pane" id="custom-settings" role="tabpanel">
            <p class="mb-0">
                <!-- Представления -->
                <div class="card">
                    @*<div class="card-header">
                        Представления
                    </div>*@
                    <div id="BoardViews" class="card-body">

                    </div>
                    <div class="card-footer text-muted">
                        <form class="row row-cols-lg-auto g-3 align-items-center">
                            <div class="col-12">
                                <div class="input-group">
                                    <div class="input-group-text">Выборка</div>
                                    <input type="text" class="form-control d-none" id="NewViewFormula" placeholder="ID формулы">
                                    <select id="TextViewFormula" class="form-select" name="TextViewFormula" value="0" onchange="changeViewFormula();"></select>
                                </div>
                            </div>

                            <div class="col-12">
                                <div class="input-group">
                                    <div class="input-group-text">Колонки</div>
                                    <select id="AddViewColumns" class="form-select" name="AddViewColumns" value="0" onchange="changeViewColumns();"></select>
                                    <input type="text" class="form-control" id="NewViewColumns" placeholder="Колонки">
                                </div>
                            </div>

                            <div class="col-12">
                                <button type="button" class="btn btn-primary" onclick="addView();">Добавить</button>
                            </div>
                        </form>
                    </div>
                </div>
                <!---->
            </p>
        </div>
    </div>

</div>

<div class="row">
    <label for="exampleDataList" class="col-md-2 col-form-label">Datalists</label>
    <div class="col-md-10">
        <input class="form-control" list="datalistOptions1" id="exampleDataList" placeholder="Type to search...">
        <datalist id="datalistOptions1">
            <option value="San Francisco 1">
            </option>
            <option value="New York 2">
            </option>
            <option value="Seattle 3">
            </option>
            <option value="Los Angeles 4">
            </option>
            <option value="Chicago 5">
            </option>
            <option value="San Francisco 6">
            </option>
            <option value="New York 7">
            </option>
            <option value="Seattle 8">
            </option>
            <option value="Los Angeles 9">
            </option>
            <option value="Chicago 10">
            </option>
            <option value="San Francisco 11">
            </option>
            <option value="New York 12">
            </option>
            <option value="Seattle 13">
            </option>
            <option value="Los Angeles 14">
            </option>
            <option value="Chicago 15">
            </option>
            <option value="San Francisco 16">
            </option>
            <option value="New York 17">
            </option>
            <option value="Seattle 18">
            </option>
            <option value="Los Angeles 19">
            </option>
            <option value="Chicago 20">
            </option>
        </datalist>
    </div>
</div>




@section Scripts {
    

    <script type="text/javascript">

        // Подстановки
        var substitutions = null;
        var sublist = [];

        // Колонки
        var col_values = [];
        var col_names = [];
        var col_list = [];

        // Условия (фильтры)
        var cnd_values = [];
        var cnd_names = [];
        var cnd_list = [];

        // Формулы (выборки)
        var frm_values = [];
        var frm_names = [];
        var frm_list = [];

        // Поехали
        getSubstitutions();
        //getColumns(0);
        //getConditions(0);
        //getFormuls(0);
        //getViews(0);

        //changeGroup();
        //changeUseCondition();
        //changeLeftAndRight();

        //recreateDatalist('datalistOptions1', [1,2,3,4,5,6,7,8,9])

        console.log('OK');

        // --------------

        // Получить подстановки для элементов групп
        async function getSubstitutions() {
            let formData = new FormData();

            $.ajax({
                type: "POST",
                url: `${GetPathBase()}/Business/JsonSubstitutions`,
                xhr: function () {
                    var myXhr = $.ajaxSettings.xhr();
                    if (myXhr.upload) {
                        myXhr.upload.onprogress = function (evt) {
                            if (evt.lengthComputable) {
                                var percentComplete = parseInt((evt.loaded / evt.total) * 100);
                                //console.log("Загрузка: " + percentComplete + "% выполнено")
                            }
                        };
                    }
                    return myXhr;
                },
                success: function (data) {
                    // your callback here
                    substitutions = data.it;
                    //console.log(substitutions);

                    //var x = getUniqueList('SO', 'Title'); // тест
                    //console.log(x);

                    getColumns(0); // далее...

                },
                error: function (jqXHR, textStatus, errorThrown) {
                    // handle error
                    alert("jqXHR.status " + jqXHR.status)
                    //alert("etAllResponseHeaders() "+ jqXHR.getAllResponseHeaders())
                    //alert("jqXHR.responseText "+ jqXHR.responseText)
                    //alert("textStatus " + textStatus)
                    //alert("errorThrown " + errorThrown)
                },
                async: true,
                data: formData,
                cache: false,
                contentType: false,
                processData: false,
                beforeSend: function () {

                },
                complete: function () {

                },
                timeout: 60000
            });
        }

        // ----------------
        // Загрузить список колонок
        async function getColumns(Id) {
            let formData = new FormData();
            formData.append("Id", 0);;

            $.ajax({
                type: "POST",
                url: `${GetPathBase()}/Business/JsGetColumns`,
                xhr: function () {
                    var myXhr = $.ajaxSettings.xhr();
                    if (myXhr.upload) {
                        myXhr.upload.onprogress = function (evt) {
                            if (evt.lengthComputable) {
                                var percentComplete = parseInt((evt.loaded / evt.total) * 100);
                                //console.log("Загрузка: " + percentComplete + "% выполнено")
                            }
                        };
                    }
                    return myXhr;
                },
                success: function (data) {
                    // your callback here
                    //console.log(data);
                    //console.log(data.result);
                    //console.log(data.columns);
                    DrawColumns(data.columns);
                    getConditions(0); // далее...

                },
                error: function (jqXHR, textStatus, errorThrown) {
                    // handle error
                    alert("jqXHR.status "+ jqXHR.status)
                    //alert("etAllResponseHeaders() "+ jqXHR.getAllResponseHeaders())
                    //alert("jqXHR.responseText "+ jqXHR.responseText)
                    //alert("textStatus " + textStatus)
                    //alert("errorThrown " + errorThrown)
                },
                async: true,
                data: formData,
                cache: false,
                contentType: false,
                processData: false,
                beforeSend: function () {

                },
                complete: function () {

                },
                timeout: 60000
            });

        }
        // Добавить колонку
        function addColumn() {
            var group = $('#NewColumnGroup').val();
            var element = $('#NewColumnElement').val();
            //console.log(group, element);

            // JsAddColumn(string nameGroup, string element)
            let formData = new FormData();
            formData.append("nameGroup", group);
            formData.append("element", element);

            $.ajax({
                type: "POST",
                url: `${GetPathBase()}/Business/JsAddColumn`,
                xhr: function () {
                    var myXhr = $.ajaxSettings.xhr();
                    if (myXhr.upload) {
                        myXhr.upload.onprogress = function (evt) {
                            if (evt.lengthComputable) {
                                var percentComplete = parseInt((evt.loaded / evt.total) * 100);
                                //console.log("Загрузка: " + percentComplete + "% выполнено")
                            }
                        };
                    }
                    return myXhr;
                },
                success: function (data) {
                    // your callback here
                    if (data.Id == null) {
                        alert(data.message);
                    }
                    getColumns(0);
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    // handle error
                    alert("jqXHR.status " + jqXHR.status)
                },
                async: true,
                data: formData,
                cache: false,
                contentType: false,
                processData: false,
                beforeSend: function () {

                },
                complete: function () {

                },
                timeout: 60000
            });

        }
        // Удалить колонку
        function delColumn(Id) {
            //console.log(Id);

            // JsDelColumn(int Id = 0)
            let formData = new FormData();
            formData.append("Id", Id);

            $.ajax({
                type: "POST",
                url: `${GetPathBase()}/Business/JsDelColumn`,
                xhr: function () {
                    var myXhr = $.ajaxSettings.xhr();
                    if (myXhr.upload) {
                        myXhr.upload.onprogress = function (evt) {
                            if (evt.lengthComputable) {
                                var percentComplete = parseInt((evt.loaded / evt.total) * 100);
                                //console.log("Загрузка: " + percentComplete + "% выполнено")
                            }
                        };
                    }
                    return myXhr;
                },
                success: function (data) {
                    // your callback here
                    if (data.Id == null) {
                        alert(data.message);
                    }
                    getColumns(0);
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    // handle error
                    alert("jqXHR.status " + jqXHR.status)
                },
                async: true,
                data: formData,
                cache: false,
                contentType: false,
                processData: false,
                beforeSend: function () {

                },
                complete: function () {

                },
                timeout: 60000
            });

        }

        // Загрузить список условий
        async function getConditions(Id) {
            let formData = new FormData();
            formData.append("Id", 0);;

            $.ajax({
                type: "POST",
                url: `${GetPathBase()}/Business/JsGetConditions`,
                xhr: function () {
                    var myXhr = $.ajaxSettings.xhr();
                    if (myXhr.upload) {
                        myXhr.upload.onprogress = function (evt) {
                            if (evt.lengthComputable) {
                                var percentComplete = parseInt((evt.loaded / evt.total) * 100);
                                //console.log("Загрузка: " + percentComplete + "% выполнено")
                            }
                        };
                    }
                    return myXhr;
                },
                success: function (data) {
                    // your callback here
                    //console.log(data);
                    //console.log(data.result);
                    //console.log(data.conditions);
                    DrawConditions(data.conditions);
                    getFormuls(0); // далее...
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    // handle error
                    alert("jqXHR.status " + jqXHR.status)
                    //alert("etAllResponseHeaders() "+ jqXHR.getAllResponseHeaders())
                    //alert("jqXHR.responseText "+ jqXHR.responseText)
                    //alert("textStatus " + textStatus)
                    //alert("errorThrown " + errorThrown)
                },
                async: true,
                data: formData,
                cache: false,
                contentType: false,
                processData: false,
                beforeSend: function () {

                },
                complete: function () {

                },
                timeout: 60000
            });

        }
        // Добавить условие
        function addCondition() {
            var IdColumn = $('#NewConditionIdCol').val();
            var nameCondition = $('#NewConditionUse').val();
            var value1 = $('#NewConditionValue1').val();
            var value2 = $('#NewConditionValue2').val();

            // JsAddCondition(int IdColumn, string nameCondition, string value1 = "", string value2 = "")
            let formData = new FormData();
            formData.append("IdColumn", IdColumn);
            formData.append("nameCondition", nameCondition);
            formData.append("value1", value1);
            formData.append("value2", value2);

            $.ajax({
                type: "POST",
                url: `${GetPathBase()}/Business/JsAddCondition`,
                xhr: function () {
                    var myXhr = $.ajaxSettings.xhr();
                    if (myXhr.upload) {
                        myXhr.upload.onprogress = function (evt) {
                            if (evt.lengthComputable) {
                                var percentComplete = parseInt((evt.loaded / evt.total) * 100);
                                //console.log("Загрузка: " + percentComplete + "% выполнено")
                            }
                        };
                    }
                    return myXhr;
                },
                success: function (data) {
                    // your callback here
                    if (data.Id == null) {
                        alert(data.message);
                    }
                    getConditions(0);
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    // handle error
                    alert("jqXHR.status " + jqXHR.status)
                },
                async: true,
                data: formData,
                cache: false,
                contentType: false,
                processData: false,
                beforeSend: function () {

                },
                complete: function () {

                },
                timeout: 60000
            });

        }
        // Удалить условие
        function delCondition(Id) {
            //console.log(Id);

            // JsDelColumn(int Id = 0)
            let formData = new FormData();
            formData.append("Id", Id);

            $.ajax({
                type: "POST",
                url: `${GetPathBase()}/Business/JsDelCondition`,
                xhr: function () {
                    var myXhr = $.ajaxSettings.xhr();
                    if (myXhr.upload) {
                        myXhr.upload.onprogress = function (evt) {
                            if (evt.lengthComputable) {
                                var percentComplete = parseInt((evt.loaded / evt.total) * 100);
                                //console.log("Загрузка: " + percentComplete + "% выполнено")
                            }
                        };
                    }
                    return myXhr;
                },
                success: function (data) {
                    // your callback here
                    if (data.Id == null) {
                        alert(data.message);
                    }
                    getConditions(0);
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    // handle error
                    alert("jqXHR.status " + jqXHR.status)
                },
                async: true,
                data: formData,
                cache: false,
                contentType: false,
                processData: false,
                beforeSend: function () {

                },
                complete: function () {

                },
                timeout: 60000
            });

        }

        // Загрузить список формул
        async function getFormuls(Id) {
            let formData = new FormData();
            formData.append("Id", 0);;

            $.ajax({
                type: "POST",
                url: `${GetPathBase()}/Business/JsGetFormuls`,
                xhr: function () {
                    var myXhr = $.ajaxSettings.xhr();
                    if (myXhr.upload) {
                        myXhr.upload.onprogress = function (evt) {
                            if (evt.lengthComputable) {
                                var percentComplete = parseInt((evt.loaded / evt.total) * 100);
                                //console.log("Загрузка: " + percentComplete + "% выполнено")
                            }
                        };
                    }
                    return myXhr;
                },
                success: function (data) {
                    // your callback here
                    //console.log(data);
                    //console.log(data.result);
                    //console.log(data.formuls);
                    DrawFormuls(data.formuls);
                    getViews(0);
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    // handle error
                    alert("jqXHR.status " + jqXHR.status)
                    //alert("etAllResponseHeaders() "+ jqXHR.getAllResponseHeaders())
                    //alert("jqXHR.responseText "+ jqXHR.responseText)
                    //alert("textStatus " + textStatus)
                    //alert("errorThrown " + errorThrown)
                },
                async: true,
                data: formData,
                cache: false,
                contentType: false,
                processData: false,
                beforeSend: function () {

                },
                complete: function () {

                },
                timeout: 60000
            });

        }
        // Добавить формулу
        function addFormula() {
            var nameLeft = $('#NewFormulaType1').val();
            var IdLeft = $('#NewFormulaId1').val();
            var nameAndOr = $('#NewFormulaOperator').val();
            var nameRight = $('#NewFormulaType2').val();
            var IdRight = $('#NewFormulaId2').val();

            // JsonResult JsAddFormula(string nameLeft, int IdLeft, string nameAndOr, string nameRight, int IdRight)
            let formData = new FormData();
            formData.append("nameLeft", nameLeft);
            formData.append("IdLeft", IdLeft);
            formData.append("nameAndOr", nameAndOr);
            formData.append("nameRight", nameRight);
            formData.append("IdRight", IdRight);

            $.ajax({
                type: "POST",
                url: `${GetPathBase()}/Business/JsAddFormula`,
                xhr: function () {
                    var myXhr = $.ajaxSettings.xhr();
                    if (myXhr.upload) {
                        myXhr.upload.onprogress = function (evt) {
                            if (evt.lengthComputable) {
                                var percentComplete = parseInt((evt.loaded / evt.total) * 100);
                                //console.log("Загрузка: " + percentComplete + "% выполнено")
                            }
                        };
                    }
                    return myXhr;
                },
                success: function (data) {
                    // your callback here
                    if (data.Id == null) {
                        alert(data.message);
                    }
                    getFormuls(0);
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    // handle error
                    alert("jqXHR.status " + jqXHR.status)
                },
                async: true,
                data: formData,
                cache: false,
                contentType: false,
                processData: false,
                beforeSend: function () {

                },
                complete: function () {

                },
                timeout: 60000
            });

        }
        // Удалить формулу
        function delFormula(Id) {
            //console.log(Id);

            // JsDelColumn(int Id = 0)
            let formData = new FormData();
            formData.append("Id", Id);

            $.ajax({
                type: "POST",
                url: `${GetPathBase()}/Business/JsDelFormula`,
                xhr: function () {
                    var myXhr = $.ajaxSettings.xhr();
                    if (myXhr.upload) {
                        myXhr.upload.onprogress = function (evt) {
                            if (evt.lengthComputable) {
                                var percentComplete = parseInt((evt.loaded / evt.total) * 100);
                                //console.log("Загрузка: " + percentComplete + "% выполнено")
                            }
                        };
                    }
                    return myXhr;
                },
                success: function (data) {
                    // your callback here
                    if (data.Id == null) {
                        alert(data.message);
                    }
                    getFormuls(0);
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    // handle error
                    alert("jqXHR.status " + jqXHR.status)
                },
                async: true,
                data: formData,
                cache: false,
                contentType: false,
                processData: false,
                beforeSend: function () {

                },
                complete: function () {

                },
                timeout: 60000
            });

        }

        // Загрузить список представлений
        async function getViews(Id) {
            let formData = new FormData();
            formData.append("Id", 0);;

            $.ajax({
                type: "POST",
                url: `${GetPathBase()}/Business/JsGetViews`,
                xhr: function () {
                    var myXhr = $.ajaxSettings.xhr();
                    if (myXhr.upload) {
                        myXhr.upload.onprogress = function (evt) {
                            if (evt.lengthComputable) {
                                var percentComplete = parseInt((evt.loaded / evt.total) * 100);
                                //console.log("Загрузка: " + percentComplete + "% выполнено")
                            }
                        };
                    }
                    return myXhr;
                },
                success: function (data) {
                    // your callback here
                    //console.log(data);
                    //console.log(data.result);
                    //console.log(data.views);
                    DrawViews(data.views);
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    // handle error
                    alert("jqXHR.status " + jqXHR.status)
                    //alert("etAllResponseHeaders() "+ jqXHR.getAllResponseHeaders())
                    //alert("jqXHR.responseText "+ jqXHR.responseText)
                    //alert("textStatus " + textStatus)
                    //alert("errorThrown " + errorThrown)
                },
                async: true,
                data: formData,
                cache: false,
                contentType: false,
                processData: false,
                beforeSend: function () {

                },
                complete: function () {

                },
                timeout: 60000
            });

        }
        // Добавить представление
        function addView() {
            var IdFormula = $('#NewViewFormula').val();
            var IdsColumns = $('#NewViewColumns').val();

            // JsonResult JsAddView(int IdFormula, string IdsColumns)
            let formData = new FormData();
            formData.append("IdFormula", IdFormula);
            formData.append("IdsColumns", IdsColumns);

            $.ajax({
                type: "POST",
                url: `${GetPathBase()}/Business/JsAddView`,
                xhr: function () {
                    var myXhr = $.ajaxSettings.xhr();
                    if (myXhr.upload) {
                        myXhr.upload.onprogress = function (evt) {
                            if (evt.lengthComputable) {
                                var percentComplete = parseInt((evt.loaded / evt.total) * 100);
                                //console.log("Загрузка: " + percentComplete + "% выполнено")
                            }
                        };
                    }
                    return myXhr;
                },
                success: function (data) {
                    // your callback here
                    if (data.Id == null) {
                        alert(data.message);
                    }
                    getViews(0);
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    // handle error
                    alert("jqXHR.status " + jqXHR.status)
                },
                async: true,
                data: formData,
                cache: false,
                contentType: false,
                processData: false,
                beforeSend: function () {

                },
                complete: function () {

                },
                timeout: 60000
            });

        }
        // Удалить представление
        function delView(Id) {
            //console.log(Id);

            // JsDelColumn(int Id = 0)
            let formData = new FormData();
            formData.append("Id", Id);

            $.ajax({
                type: "POST",
                url: `${GetPathBase()}/Business/JsDelView`,
                xhr: function () {
                    var myXhr = $.ajaxSettings.xhr();
                    if (myXhr.upload) {
                        myXhr.upload.onprogress = function (evt) {
                            if (evt.lengthComputable) {
                                var percentComplete = parseInt((evt.loaded / evt.total) * 100);
                                //console.log("Загрузка: " + percentComplete + "% выполнено")
                            }
                        };
                    }
                    return myXhr;
                },
                success: function (data) {
                    // your callback here
                    if (data.Id == null) {
                        alert(data.message);
                    }
                    getViews(0);
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    // handle error
                    alert("jqXHR.status " + jqXHR.status)
                },
                async: true,
                data: formData,
                cache: false,
                contentType: false,
                processData: false,
                beforeSend: function () {

                },
                complete: function () {

                },
                timeout: 60000
            });

        }

        // --------------------------------------------------------------------------------
        //Сортировка по Id для массива
        function SortById(a, b) {
            var aId = a.Id;
            var bId = b.Id;
            return ((aId < bId) ? -1 : ((aId > bId) ? 1 : 0));
        }
        function SortByGroup(a, b) {
            var aId = a.group;
            var bId = b.group;
            return ((aId < bId) ? -1 : ((aId > bId) ? 1 : 0));
        }
        function SortByElement(a, b) {
            var aId = a.element;
            var bId = b.element;
            return ((aId < bId) ? -1 : ((aId > bId) ? 1 : 0));
        }

        // --------------------------------------------------------------------------------

        // Перевод условий
        function conditionToRUS(ifname) {
            switch (ifname) {
                case 'empty':
                    return 'пусто';
                case 'notempty':
                    return 'не пусто';
                case 'equals':
                    return '=';
                case 'notequals':
                    return '<>';
                case 'gt':
                    return '>';
                case 'gte':
                    return '>=';
                case 'lt':
                    return '<';
                case 'lte':
                    return '<=';
                case 'contains':
                    return 'содержит';
                case 'notcontains':
                    return 'не содержит';
                case 'between':
                    return 'между';
                case 'notbetween':
                    return 'вне';
                default:
                    return ifname;
            }
        }

        // --------------------------------------------------------------------------------

        // Получить значение по ID
        function get_colName(Id) {
            //var index = col_values.indexOf(Id);
            //if (index >= 0 && col_names.length > index) {
            //    return col_names[index];
            //}
            //return Id;
            return getValueListB(Id, col_values, col_names);
        }

        // Получить значение из списка Б, по ключу из списка А
        function getValueListB(valueProp, listA, listB) {
            console.log(valueProp, listA, listB);
            var index = listA.indexOf(valueProp);
            console.log('index=', index);
            if (index > 0 && listB.length > index) {
                return listB[index];
            }
            return valueProp;
        }

        // Получить текстовое описание объекта (Колонка) через поиск по его ID
        function get_textColumn(Id) {
            var item = col_list.find(obj => {
                return obj.Id === Id
            })
            if (item != null) {
                //return item.Id +') '+ item.group +'.'+item.element;
                return combine_textColumn(item.Id, item.group, item.element);
            }
            return Id;
        }

        // ...
        function get_textFormula(Id) {
            var item = frm_list.find(obj => {
                return obj.Id === Id
            })
            if (item != null) {
                return combine_textFormula(item.Id, item.typeLeft, item.IdLeft, item.AndOr, item.typeRight, item.IdRight);
            }
            return Id;
        }

        // ...
        function combine_textColumn(Id, group, element) {
            return Id + ': ' + group + '.' + element;
        }

        // ...
        function combine_textCondition(Id, IdColumn, cond, value1, value2) {
            var txt = '';
            if (value1 != "") {
                txt = txt + value1;
                if (value2 != "") {
                    txt = '[' + txt + ';' + value2 + ']';
                }
            }
            return Id + ': ' + get_colName(IdColumn) + ' ' + conditionToRUS(cond) + ' ' + txt;
        }

        function combine_textFormula(Id, typeLeft, IdLeft, AndOr, typeRight, IdRight) {
            var txt = Id + ': ';
            if (typeLeft != 'None') {
                txt = txt + typeLeft + '-' + IdLeft;
                if (AndOr != 'END' && typeRight != 'None') {
                    txt = txt + ' ' + AndOr + ' ' + typeRight + '-' + IdRight;
                }
            }
            return txt;
        }

        // Получить text по value для SELECT
        //function get_colName(value, IdSelect) {
        //    sel = $('#' + IdSelect);
        //    //console.log(value, IdSelect, sel);
        //    var len = $('#' + IdSelect+' option').length;
        //    console.log(len);
        //    for (let i = 0; i < len; i++) {
        //        //if (sel.options[i].val() == value) {
        //        //console.log(sel.options[i].text);
        //            //return sel.options[i].text;
        //        //}
        //    }
        //    $('#' + IdSelect + ' option').each(function () {
        //        console.log(this.text+'>');
        //    });
        //    //console.log('get_colName ERR(');
        //    return value;
        //}

        // --------------------------------------------------------------------------------

        // Построить список колонок
        function DrawColumns(columns) {
            columns.sort(SortByElement);
            columns.sort(SortByGroup);

            //var table = document.createElement('table');
            var $tbl = $('<table class="table table-sm table-striped mb-0 table-bordered" style="border-collapse: collapse; border-spacing: 0px; width: 100%;"/>');
            var $thead = $('<thead class="bg-primary text-white"/>');
            $thead.append('<tr><td> ID </td><td> Группа </td><td> Параметр </td><td> Команды </td></tr>');
            var $tbody = $('<tbody/>');

            values = [];
            names = [];
            sublist = [];

            $.each(columns, function (index, value) {
                //var tr = document.createElement('tr');
                //var td1 = document.createElement('td');
                //var td2 = document.createElement('td');
                //var td3 = document.createElement('td');
                //var text1 = document.createTextNode(value.Id);
                //var text2 = document.createTextNode(value.element);
                //var text3 = document.createTextNode(value.group);
                //td1.appendChild(text1);
                //td2.appendChild(text2);
                //td3.appendChild(text3);
                //tr.appendChild(td1);
                //tr.appendChild(td2);
                //tr.appendChild(td3);
                //table.appendChild(tr);
                $tbody.append('<tr><td>' + value.Id + '</td><td>' + value.group + '</td><td>' + value.element + '</td><td> <a class="btn btn-outline-primary btn-sm edit mx-1" title="Удалить" data-bs-toggle="modal" data-bs-target="#myModalDel" onclick="delColumn('+value.Id+')"><i class="fas fa-times fa-lg"></i></a> </td></tr>');

                values.push(value.Id);
                names.push(combine_textColumn(value.Id, value.group, value.element));
                sublist.push(getUniqueList(value.group, value.element));

            });

            //console.log(sublist); // тест

            col_list = columns;
            col_values = values;
            col_names = names;

            $tbl.append($thead);
            $tbl.append($tbody);

            $("#BoardColumns").empty();
            $('#BoardColumns').append($tbl);

            // +++
            recreateSelect('NewConditionCol', values, names);
            var vx = [0];
            var nx = ['Новая группа'];
            recreateSelect('AddViewColumns', vx.concat(values), nx.concat(names));
            changeElementCondition();
            changeGroup();
        }

        // Построить список условий
        function DrawConditions(conditions) {
            conditions.sort(SortById);

            var $tbl = $('<table class="table table-sm table-striped mb-0 table-bordered" style="border-collapse: collapse; border-spacing: 0px; width: 100%;"/>');
            var $thead = $('<thead class="bg-primary text-white"/>');
            $thead.append('<tr><td> ID </td><td> ID колонки </td><td> Условие </td><td> Константа 1 </td><td> Константа 2 </td><td> Команды </td></tr>');
            var $tbody = $('<tbody/>');

            values = [];
            names = [];

            $.each(conditions, function (index, value) {
                if (value.value1 == null) {
                    value.value1 = "";
                }

                if (value.value2 == null) {
                    value.value2 = "";
                }
                $tbody.append('<tr><td>' + value.Id + '</td><td>' + get_colName(value.IdColumn) + '</td><td>' + value.condition + '</td><td>' + value.value1 + '</td><td>' + value.value2 + '</td><td> <a class="btn btn-outline-primary btn-sm edit mx-1" title="Удалить" data-bs-toggle="modal" data-bs-target="#myModalDel" onclick="delCondition(' + value.Id + ')"><i class="fas fa-times fa-lg"></i></a> </td></tr>');

                values.push(value.Id);
                names.push(combine_textCondition(value.Id, value.IdColumn, value.condition, value.value1, value.value2));
            });

            cnd_list = conditions;
            cnd_values = values;
            cnd_names = names;

            $tbl.append($thead);
            $tbl.append($tbody);

            $("#BoardConditions").empty();
            $('#BoardConditions').append($tbl);

            //+++
            changeUseCondition();
            recreateSelect('LeftFromCondition', values, names);
            recreateSelect('RightFromCondition', values, names);
            
        }

        // Построить список формул
        function DrawFormuls(formuls) {
            formuls.sort(SortById);

            var $tbl = $('<table class="table table-sm table-striped mb-0 table-bordered" style="border-collapse: collapse; border-spacing: 0px; width: 100%;"/>');
            var $thead = $('<thead class="bg-primary text-white"/>');
            $thead.append('<tr><td> ID </td><td> Тип слева </td><td> ID слева </td><td> Оператор </td><td> Тип справа </td><td> ID справа </td><td> Команды </td></tr>');
            var $tbody = $('<tbody/>');

            values = [];
            names = [];

            $.each(formuls, function (index, value) {
                values.push(value.Id);
                names.push(combine_textFormula(value.Id, value.typeLeft, value.IdLeft, value.AndOr, value.typeRight, value.IdRight));
            });

            frm_list = formuls;
            frm_values = values;
            frm_names = names;

            $.each(formuls, function (index, value) {
                $tbody.append('<tr><td>' + value.Id + '</td><td>' + value.typeLeft + '</td><td>' + value.IdLeft + '</td><td>' + value.AndOr + '</td><td>' + value.typeRight + '</td><td>' + value.IdRight + '</td><td> <a class="btn btn-outline-primary btn-sm edit mx-1" title="Удалить" data-bs-toggle="modal" data-bs-target="#myModalDel" onclick="delFormula(' + value.Id + ')"><i class="fas fa-times fa-lg"></i></a> </td></tr>');
            });

            $tbl.append($thead);
            $tbl.append($tbody);

            $("#BoardFormuls").empty();
            $('#BoardFormuls').append($tbl);

            // +++
            changeLeftAndRight();
            recreateSelect('LeftFromFormula', values, names);
            recreateSelect('RightFromFormula', values, names);
            recreateSelect('TextViewFormula', values, names);
        }

        // Построить список представлений
        function DrawViews(views) {
            views.sort(SortById);

            //var table = document.createElement('table');
            var $tbl = $('<table class="table table-sm table-striped mb-0 table-bordered" style="border-collapse: collapse; border-spacing: 0px; width: 100%;"/>');
            var $thead = $('<thead class="bg-primary text-white"/>');
            $thead.append('<tr><td> ID </td><td> ID выборки </td><td> Колонки </td><td> Команды </td></tr>');
            var $tbody = $('<tbody/>');
            
            $.each(views, function (index, value) {
                //console.log(index, value.Id, value.element, value.group);

                //var tr = document.createElement('tr');
                //var td1 = document.createElement('td');
                //var td2 = document.createElement('td');
                //var td3 = document.createElement('td');
                //var text1 = document.createTextNode(value.Id);
                //var text2 = document.createTextNode(value.element);
                //var text3 = document.createTextNode(value.group);
                //td1.appendChild(text1);
                //td2.appendChild(text2);
                //td3.appendChild(text3);
                //tr.appendChild(td1);
                //tr.appendChild(td2);
                //tr.appendChild(td3);
                //table.appendChild(tr);
                $tbody.append('<tr><td>' + value.Id + '</td><td>' + get_textFormula(value.IdFormula) + '</td><td>' + value.IdColumns + '</td><td> <a class="btn btn-outline-primary btn-sm edit mx-1" title="Удалить" data-bs-toggle="modal" data-bs-target="#myModalDel" onclick="delView(' + value.Id + ')"><i class="fas fa-times fa-lg"></i></a> </td></tr>');

            });

            $tbl.append($thead);
            $tbl.append($tbody);

            $("#BoardViews").empty();
            //$('#Board').append(table);
            $('#BoardViews').append($tbl);

            // +++
            changeViewFormula();

            console.log('Table OK');

        }

        // ----------------------------------------

        // Получить список уникальных значений для выбора
        function getUniqueList(group, element) {
            var myList = [];
            try {
                myList = substitutions[group][element];
            } catch (err) {

            }
            return myList;
        }

        // ----------------------------------------

        function BoolToQueryLeftRight(value) {
            if (value) {
                return "Выборка";
            } else {
                return "Фильтр";
            }
        }

        function BoolToOperatorLeftRight(value) {
            if (value) {
                return "И";
            } else {
                return "ИЛИ";
            }
        }

        // ---------------------------------------------

        // Отображение списка параметров для выбранной группы
        function changeGroup() {
            var group = $('#NewColumnGroup').val();
            $('#NewColumnElement').hide();
            $('#NewColumnSO').hide();
            $('#NewColumnWork').hide();
            $('#NewColumnStep').hide();
            $('#NewColumnUser').hide();
            $('#NewColumnFile').hide();

            $('#NewColumn' + group).show();
            setTagValue('NewColumnElement', $('#NewColumn' + group).val());
        }

        //...
        function changeElementCondition() {
            var ID = $('#NewConditionCol').val();
            setTagValue('NewConditionIdCol', ID);
            // подстановки
            //console.log('changeElementCondition');
            //console.log(ID);
            //console.log(col_values);
            //console.log(sublist);
            var dlist = getValueListB(parseInt(ID, 10), col_values, sublist);
            console.log(dlist);
            recreateDatalist('datalistOptions1', dlist);
        }

        //...
        function changeUseCondition() {
            var ifname = $('#NewConditionUse').val();
            var id1 = 'conval1';
            var id2 = 'conval2';
            switch (ifname) {
                case 'empty':
                case 'notempty':
                    $('#' + id1).hide();
                    $('#' + id2).hide();
                    break;

                case 'equals':
                case 'notequals':
                case 'gt':
                case 'gte':
                case 'lt':
                case 'lte':
                case 'contains':
                case 'notcontains':
                    $('#' + id1).show();
                    $('#' + id2).hide();
                    break;

                case 'between':
                case 'notbetween':
                    $('#' + id1).show();
                    $('#' + id2).show();
                    break;

                default:
                    $('#' + id1).hide();
                    $('#' + id2).hide();
                    break;
            }
        }

        function changeLeftFormula() {
            setTagValue('NewFormulaId1', $('#LeftFromFormula').val());
        }
        function changeLeftCondition() {
            setTagValue('NewFormulaId1', $('#LeftFromCondition').val());
        }
        function changeRightFormula() {
            setTagValue('NewFormulaId2', $('#RightFromFormula').val());
        }
        function changeRightCondition() {
            setTagValue('NewFormulaId2', $('#RightFromCondition').val());
        }

        function changeViewFormula() {
            setTagValue('NewViewFormula', $('#TextViewFormula').val());
        }

        function changeViewColumns() {
            var tx = '';
            var prev = $('#NewViewColumns').val();
            var add = $('#AddViewColumns').val();
            if (add == 0) {
                add = '>';
            }
            if (prev != '') {
                tx = tx + ' ';
            }
  
            tx = tx + add;
            setTagValue('NewViewColumns', prev + tx);
        }

        //...
        function FCdisplay(LR, value) {
            if (value == 'Condition') {
                $('#' + LR + 'FromCondition').show();
                $('#' + LR + 'FromFormula').hide();
            }
            else if (value == 'Formula') {
                $('#' + LR + 'FromCondition').hide();
                $('#' + LR + 'FromFormula').show();
            } else {
                $('#' + LR + 'FromCondition').hide();
                $('#' + LR + 'FromFormula').hide();
            }
        }

        //...
        function changeLeftAndRight() {
            var type1 = $('#NewFormulaType1').val();
            var type2 = $('#NewFormulaType2').val();
            var operator = $('#NewFormulaOperator').val();

            FCdisplay('Left', type1);
            FCdisplay('Right', type2);

            if (type1 == 'Condition') {
                changeLeftCondition();
            }
            else if (type1 == 'Formula') {
                changeLeftFormula();
            }

            if (type2 == 'Condition') {
                changeRightCondition();
            }
            else if (type2 == 'Formula') {
                changeRightFormula();
            }

            switch (type1) {
                case 'Condition':
                case 'Formula':
                    $('#colformulaId1').show();
                    $('#coloperator').show();
                    if (operator != 'END') {
                        $('#colformulaType2').show();
                        if (type2 != 'None') {
                            $('#colformulaId2').show();
                        } else {
                            $('#colformulaId2').hide();
                        }
                    } else {
                        $('#colformulaType2').hide();
                        $('#colformulaId2').hide();
                    }
                    $('#colformulaBut').show();
                    break;

                default:
                    $('#colformulaId1').hide();
                    $('#coloperator').hide();
                    $('#colformulaType2').hide();
                    $('#colformulaId2').hide();
                    $('#colformulaBut').hide();
                    break;
            }
        }

        // -------------------------------------------------

        // Установить значение для любого тега
        function setTagValue(IdTag, value) {
            $('#'+IdTag).val(value);
        }

        // Установить значение параметра
        function setColumnElement(value) {
            $('#NewColumnElement').val(value);
        }

        // Переопределить список <select/>
        function recreateSelect(IdSelect, values, names) {
            console.log(IdSelect);
            $('#'+IdSelect).empty();

            if (names == null)
                names = values;

            if (names.length >= values.length) {
                for (let i = 0; i < values.length; ++i) {
                    $('#'+IdSelect).append(new Option(names[i], values[i]));
                }
            }
        }

        // Переопределить список <list/>
        function recreateDatalist(IdSelect, values) {
            console.log(IdSelect);
            $('#' + IdSelect).empty();

            for (let i = 0; i < values.length; ++i) {
                $('#' + IdSelect).append(new Option(values[i]));
            }
        }

    </script>
}