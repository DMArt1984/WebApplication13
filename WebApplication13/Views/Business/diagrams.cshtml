@model IEnumerable<FactPortal.Models.Statistic>

@{
    ViewData["Title"] = "Статистика по обслуживанию";
}

@section CSS_first {
    <!-- DataTables -->
    <link href="~/assets/libs/datatables.net-bs4/css/dataTables.bootstrap4.min.css" rel="stylesheet" type="text/css" />
    <link href="~/assets/libs/datatables.net-buttons-bs4/css/buttons.bootstrap4.min.css" rel="stylesheet" type="text/css" />

    <!-- Responsive datatable examples -->
    <link href="~/assets/libs/datatables.net-responsive-bs4/css/responsive.bootstrap4.min.css" rel="stylesheet" type="text/css" />
}
@{
     string Statusfull(int Status)
        {
            switch (Status)
            {
                case 1:
                    return "10";
                case 2:
                    return "20";
                case 5:
                    return "50";
                case 8:
                    return "80";
                case 9:
                    return "100";
                default:
                    return "0";
            }
        }
          string StatusRus_(int Status)
        {
            switch (Status)
            {
                case 0:
                    return "ожидание";
                case 1:
                    return "редактирование";
                case 2:
                    return "работа";
                case 3:
                    return "частично";
                case 4:
                    return "выполнено";
                default:
                    return "-";
            }
        }
         string StatusColor(int Status)
        {
            switch (Status)
            {
                case 1:
                    return "#FF0000";
                case 2:
                    return "#FFA500";
                case 3:
                    return "#FF8C00";
                case 4:
                    return "#008B8B";
                case 5:
                    return "#9ACD32";
                default:
                    return "#E0FFFF";
            }
        }
}

@{
    int count_of_list(List<int> lst)
    {
        int Count=0;
        foreach(var item in lst){ Count += item; }
        return Count;
    }
    void showalldiag()
    {
         List<int> List_of_stat = new List<int>() {0, 0, 0, 0, 0, 0 };
    @foreach (var item in Model.OrderBy(x => x.DT))
                {
           if(item.Status==1) List_of_stat[1]++;
           else if(item.Status==2) List_of_stat[2]++;
           else if(item.Status==5) List_of_stat[3]++;
           else if(item.Status==8) List_of_stat[4]++;
           else if(item.Status==9) List_of_stat[5]++;
           else List_of_stat[0]++;
            } 
    <div class="pie" style="--p:100; --c:#696969;  position: absolute;"> </div>
                        var g = 0;
              List<List<int>> pairs = new List<List<int>>();
                    for(var i =1;i<List_of_stat.Count();i++)
        {
            var cnt = count_of_list(List_of_stat);
            double objofl = List_of_stat[i];
            double Value = ( objofl / cnt)*100;
            g += Convert.ToInt32(Math.Round(Value));
            List<int> pai = new List<int>(){g,i, Convert.ToInt32(Math.Round(Value)) };
            pairs.Add(pai);

        }
                         
                         for(var i =pairs.Count()-1;i>=0;i--)
            {
    <div class="pie" style="--p:@pairs[i][0]; --c:@StatusColor(pairs[i][1]); position: absolute;"> </div>

            }
         for (var i = pairs.Count() - 1; i >= 0; i--)
        {
    <div style="margin-left:200px;  position:relative; margin-top:20px;"><div style=" background-color:@StatusColor(pairs[i][1]) ; width: 10px; height:10px;display: inline-block;border-radius: 50px; ">  </div><div style="display: inline-block; padding-left:10px"> @pairs[i][2]% @StatusRus_(i)</div></div>
         }
      

                
            }
        }

        <style type="text/css">

           
            .pie {
            --p:20;
            --b:22px;
            --c:darkred;
            --w:150px;
            
            width:var(--w);
            aspect-ratio:1;
            position:relative;
            display:inline-grid;
            margin:5px;
            place-content:center;
            font-size:25px;
            font-weight:bold;
            font-family:sans-serif;
            }
            .pie:before,
            .pie:after {
            content:"";
            position:absolute;
            border-radius:50%;
            }
            .pie:before {
            inset:0;
            background:
                radial-gradient(farthest-side,var(--c) 98%,#0000) top/var(--b) var(--b) no-repeat,
                conic-gradient(var(--c) calc(var(--p)*1%),#0000 0);
            -webkit-mask:radial-gradient(farthest-side,#0000 calc(99% - var(--b)),#000 calc(100% - var(--b)));
                    mask:radial-gradient(farthest-side,#0000 calc(99% - var(--b)),#000 calc(100% - var(--b)));
            }
            .pie:after {
            inset:calc(50% - var(--b)/2);
            background:var(--c);
            transform:rotate(calc(var(--p)*3.6deg)) translateY(calc(50% - var(--w)/2));
            }
            .animate {
            animation:p 1s .5s both;
            }
            .no-round:before {
            background-size:0 0,auto;
            }
            .no-round:after {
            content:none;
            }
            }
            
            </style>
    
    @{showalldiag();}
   
    @section Scripts {
    <!-- Required datatable js -->
    <script src="~/assets/libs/datatables.net/js/jquery.dataTables.min.js"></script>
    <script src="~/assets/libs/datatables.net-bs4/js/dataTables.bootstrap4.min.js"></script>

    <!-- Datatable init js -->
    <script src="~/assets/js/pages/datatables.init.js"></script>
    }
