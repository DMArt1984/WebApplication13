@model RepAll
@using System.Collections;

@{
    ViewData["Title"] = "report1";

    int IndexTable = 0;

    void CreateTable(RepTable RT)
    {
        IndexTable++;
        <!-- Table -->
        <table id="dtable @IndexTable" class="table table-sm table-striped mb-0 table-bordered" style="border-collapse: collapse; border-spacing: 0px; width: 100%;">
            @if (String.IsNullOrWhiteSpace(RT.Title))
            {
                <thead class="bg-primary text-white">
                    <tr>
                        @for (var i = 0; i < RT.ColsName.Length; i++)
                        {
                            <th>@RT.ColsName[i] [@RT.ColsType[i]]</th>
                        }
                    </tr>
                </thead>
            }
            else
            {
                <caption style="caption-side:top">@RT.Title</caption>
            }
            <tbody>
                @foreach (var item in RT.Rows)
                {
                    <tr>
                        @for (var i = 0; i < item.Values.Length; i++)
                        {
                            <td>
                                @{
                                    CellContent(item.Values[i]);
                                }
                            </td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    }

    void CreateAccordion(RepAccordion RA)
    {
        IndexTable++;
        <div class="">
            @for (var i = 0; i < RA.rows.Length; i++)
            {
                <div class="card border mb-1">
                    <div class="card-header" id="heading@(IndexTable)_@(i)">
                        <h5 class="m-0 font-size-14">
                            <a data-bs-toggle="collapse" data-parent="#accordion" href="#collapse@(IndexTable)_@(i)" aria-expanded="false" aria-controls="collapse@(IndexTable)_@(i)" class="text-dark collapsed">
                                <i class="far fa-plus-square fa-lg px-2"></i>
                                @RA.rows[i].Title
                            </a>
                        </h5>
                    </div>

                    <div id="collapse@(IndexTable)_@(i)" class="collapse" aria-labelledby="heading@(IndexTable)_@(i)" data-parent="#accordion" style="">
                        <div class="card-body p-1">
                            @{
                                CellContent(@RA.rows[i].Content);
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    }

    void CreateCollaps(RepCollaps RC)
    {
        IndexTable++;
        <div class="">
            @for (var i = 0; i < RC.rows.Length; i++)
            {
                int index = IndexTable;
            <div class="px-1">
                <p class="mb-0">
                    <a class="mt-1 me-1" data-bs-toggle="collapse" href="#collapseExample@(index)_@(i)" aria-expanded="true" aria-controls="collapseExample@(index)_@(i)">
                        <i class="fas fa-plus-square px-2"></i>
                    </a>
                    @{
                        CellContent(@RC.rows[i].TitleContent);
                    }
                </p>

                <div class="collapse hide px-3" id="collapseExample@(index)_@(i)" style="">
                    <div class="mt-2 mb-2">
                        @{
                            CellContent(@RC.rows[i].OpenContent);
                        }
                    </div>
                </div> 
            </div>
            }
        </div>
                            }

    void CellContent(dynamic Value)
                            {
                                //dynamic Value = item.Values[i];
                                Type Selector = Value.GetType();
                                if (Selector == typeof(RepTable))
                                {
                                    // Рекурсивный вызов функции...
                                    RepTable there = Value;
                                    CreateTable(there);
                                }
                                else if (Selector == typeof(RepAccordion))
                                {
                                    // Рекурсивный вызов функции...
                                    RepAccordion there = Value;
                                    CreateAccordion(there);
                                }
                                else if (Selector == typeof(RepCollaps))
                                {
                                    // Рекурсивный вызов функции...
                                    RepCollaps there = Value;
                                    CreateCollaps(there);
                                }
                                else if (Selector == typeof(UserCell))
                                {
                                    UserCell there = Value;
            @Html.Partial("_cellUser", there)
        }
        else if (Value.GetType() == typeof(ServiceObjectCell))
        {
            ServiceObjectCell there = Value;
            @Html.Partial("_cellSObject", there)
        }
        else if (Value.GetType() == typeof(cellCircle))
        {
            cellCircle there = Value;
            @Html.Partial("_cellCircle", there)
        }
        else if (Value.GetType() == typeof(cellProgressBar))
        {
            cellProgressBar there = Value;
            @Html.Partial("_cellProgressBar", there)
        }
        else if (Value.GetType() == typeof(cellTextAccordion))
        {
            cellTextAccordion there = Value;
            @Html.Partial("_cellTextAccordion", there)
        }
        else if (Value.GetType() != typeof(string) && Value is IEnumerable)
        {
            if (Value[0].GetType() == typeof(myFiles))
            {
                List<myFiles> mylist = Value;
                @Html.Partial("_FilesV", mylist)
            }
            else
            {
                //@Value
            }
        }
        else
        {
            @Value
        }

    }

}

@section CSS_first {

}

<div class="card">
    <div class="card-header">
    </div>
    <div class="card-body">
        @{
            //CreateTable(Model);
            CellContent(Model.item);
        }
    </div>
</div>

<div class="card">
    <div class="card-body">
        <p class="mb-0">
            <a class="btn btn-primary mt-1 me-1" data-bs-toggle="collapse" href="#collapseExample" aria-expanded="true" aria-controls="collapseExample">
                Link with href
            </a>
            <button class="btn btn-primary mt-1 me-1" type="button" data-bs-toggle="collapse" data-bs-target="#collapseExample" aria-expanded="true" aria-controls="collapseExample">
                Button with data-bs-target
            </button>
        </p>
        <div class="collapse show" id="collapseExample" style="">
            <div class="card card-body mt-3 mb-0">
                Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt sapiente ea proident.
            </div>
        </div>
    </div>
</div>

@Html.Partial("_DiagramCircle")