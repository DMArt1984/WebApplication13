@model RepAll
@using System.Collections;

@{
    ViewData["Title"] = "report1";

    int IndexTable = 0;

    void CreateTable(RepTable RTA)
    {
        IndexTable++;
        <!-- Table -->
        <table id="dtable @IndexTable" class="table table-sm table-striped mb-0 table-bordered" style="border-collapse: collapse; border-spacing: 0px; width: 100%;">
            @if (String.IsNullOrWhiteSpace(RTA.Title))
            {
                <thead class="bg-primary text-white">
                    <tr>
                        @for (var i = 0; i < RTA.ColsName.Length; i++)
                        {
                            <th>@RTA.ColsName[i] [@RTA.ColsType[i]]</th>
                        }
                    </tr>
                </thead>
            }
            else
            {
                <caption style="caption-side:top">@RTA.Title</caption>
            }
            <tbody>
                @foreach (var item in RTA.Rows)
                {
                    <tr>
                        @for (var i = 0; i < item.Values.Length; i++)
                        {
                        <td>
                            @{
                                CellContent(item.Values[i]);
                            }
                        </td>
                         }
                    </tr>
                 }
            </tbody>
        </table>
                                }

    void CreateAccordion(RepAccordion RA)
    {
        IndexTable++;
        <div id="accordion">
            @for (var i = 0; i < RA.rows.Length; i++)
            {
                <div class="card border mb-1">
                    <div class="card-header" id="heading@(IndexTable)_@(i)">
                        <h5 class="m-0 font-size-14">
                            <a data-bs-toggle="collapse" data-parent="#accordion" href="#collapse@(IndexTable)_@(i)" aria-expanded="false" aria-controls="collapse@(IndexTable)_@(i)" class="text-dark collapsed">
                                @RA.rows[i].Title
                            </a>
                        </h5>
                    </div>

                    <div id="collapse@(IndexTable)_@(i)" class="collapse" aria-labelledby="heading@(IndexTable)_@(i)" data-parent="#accordion" style="">
                        <div class="card-body p-1">
                            @{
                                CellContent(@RA.rows[i].Content);
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
                                }

    void CellContent(dynamic Value)
    {
        //dynamic Value = item.Values[i];
        Type Selector = Value.GetType();
        if (Selector == typeof(RepTable))
        {
            // Рекурсивный вызов функции...
            RepTable there = Value;
            CreateTable(there);
        }
        else if (Selector == typeof(RepAccordion))
        {
            // Рекурсивный вызов функции...
            RepAccordion there = Value;
            CreateAccordion(there);
        }
        else if (Selector == typeof(UserCell))
        {
            UserCell there = Value;
            @Html.Partial("_cellUser", there)
        }
        else if (Value.GetType() == typeof(ServiceObjectCell))
        {
            ServiceObjectCell there = Value;
            @Html.Partial("_cellSObject", there)
        }
        else if (Value.GetType() == typeof(cellCircle))
        {
            cellCircle there = Value;
            @Html.Partial("_cellCircle", there)
        }
        else if (Value.GetType() == typeof(cellProgressBar))
        {
            cellProgressBar there = Value;
            @Html.Partial("_cellProgressBar", there)
        }
        else if (Value.GetType() == typeof(cellTextAccordion))
        {
            cellTextAccordion there = Value;
            @Html.Partial("_cellTextAccordion", there)
        }
        else if (Value.GetType() != typeof(string) && Value is IEnumerable)
        {
            if (Value[0].GetType() == typeof(myFiles))
            {
                List<myFiles> mylist = Value;
                @Html.Partial("_FilesV", mylist)                           
            } else
            {
                //@Value
            }
        }
        else
        {
            @Value
        }

    }

}

@section CSS_first {

}

<div class="card">
    <div class="card-header">
    </div>
    <div class="card-body">
        @{
            //CreateTable(Model);
            CellContent(Model.item);
        }
    </div>
</div>


@Html.Partial("_DiagramCircle")